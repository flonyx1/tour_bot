import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from config import ADMIN_IDS, LOBBY_TIMEOUT, GAME_TIMEOUT
from dependencies import get_bot, get_db
from keyboards import get_connect_keyboard, get_game_result_keyboard
from utils.helpers import format_game_result

router = Router()
db = get_db()

user_dice_throws = {}

@router.message(Command("game"))
async def create_game(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<b>‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä—ã !</b>")
        return
        
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /game @username1 @username2 !</b>")
            return
            
        username1 = parts[1].lstrip('@').lower()
        username2 = parts[2].lstrip('@').lower()
        
        if not username1 or not username2:
            await message.answer("<b>‚ùå –£–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ username !</b>")
            return
            
        lobby_id = db.create_lobby(
            message.chat.id,
            message.from_user.id,
            username1,
            username2
        )
        
        await message.answer(
            f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –ª–æ–±–±–∏ 1 vs 1 ‚úÖ</b>\n\n"
            f"<code>üÜî ID: {lobby_id}</code>\n"
            f"<b>üë§ –ò–≥—Ä–æ–∫ 1: @{username1}</b>\n"
            f"<b>üë§ –ò–≥—Ä–æ–∫ 2: @{username2}</b>\n\n"
            f"<b>‚è∞ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç !</b>\n"
            f"<blockquote>‚ö° –¢–æ—Ä–æ–ø–∏—Ç–µ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ! ‚ö°</blockquote>",
            reply_markup=get_connect_keyboard(lobby_id)
        )
        
        asyncio.create_task(lobby_timeout(lobby_id))
        
    except Exception as e:
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏: {e} !</b>")

async def lobby_timeout(lobby_id: str):
    """–¢–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–±–±–∏ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    await asyncio.sleep(LOBBY_TIMEOUT)
    
    lobby_data = db.get_lobby(lobby_id)
    if lobby_data and lobby_data["status"] == "waiting":
        # –ù–∞—Ö–æ–¥–∏–º –∫—Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è
        not_connected = []
        for username, player_data in lobby_data["players"].items():
            if not player_data["connected"]:
                not_connected.append(username)
        
        db.delete_lobby(lobby_id)
        bot = get_bot()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
        try:
            if not_connected:
                await bot.send_message(
                    lobby_data["chat_id"],
                    f"<b>‚ùå –õ–æ–±–±–∏ {lobby_id} —É–¥–∞–ª–µ–Ω–æ !</b>\n\n"
                    f"<b>üë• –ò–≥—Ä–æ–∫–∏: @{', @'.join(lobby_data['players'].keys())}</b>\n"
                    f"<b>‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å: @{', @'.join(not_connected)}</b>\n"
                    f"<blockquote>‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ ! ‚è∞</blockquote>"
                )
            else:
                await bot.send_message(
                    lobby_data["chat_id"],
                    f"<b>‚ùå –õ–æ–±–±–∏ {lobby_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É !</b>"
                )
        except:
            pass

@router.callback_query(F.data.startswith("connect_"))
async def connect_to_lobby(callback: CallbackQuery):
    lobby_id = callback.data.split("_")[1]
    username = callback.from_user.username.lower() if callback.from_user.username else None
        
    if not username:
        await callback.answer("<b>‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å username !</b>", show_alert=True)
        return
        
    lobby_data = db.get_lobby(lobby_id)
    
    if not lobby_data:
        await callback.answer("<b>‚ùå –õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ !</b>", show_alert=True)
        return
        
    lobby_usernames = [name.lower() for name in lobby_data["players"].keys()]
    if username not in lobby_usernames:
        await callback.answer("<b>‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∏–≥—Ä—ã !</b>", show_alert=True)
        return
        
    original_username = None
    for player_username in lobby_data["players"].keys():
        if player_username.lower() == username:
            original_username = player_username
            break
            
    if db.connect_player(lobby_id, original_username):
        await callback.answer("<b>‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏ !</b>")
        
        lobby_data = db.get_lobby(lobby_id)
        all_connected = all(player["connected"] for player in lobby_data["players"].values())
        
        if all_connected:
            db.update_lobby_status(lobby_id, "playing")
            players = list(lobby_data["players"].keys())
            
            bot = get_bot()
            await bot.send_message(
                lobby_data["chat_id"],
                f"<b>üéÆ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏ {lobby_id} ! üéÆ</b>\n\n"
                f"<b>üë§ @{players[0]} –∏ üë§ @{players[1]}</b>\n\n"
                f"<b>üé≤ –ö–∏–¥–∞–π—Ç–µ –ø–æ 2 –∫—É–±–∏–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç !</b>\n"
                f"<b>‚è∞ –í—Ä–µ–º—è –Ω–∞ –±—Ä–æ—Å–∫–∏: 5 –º–∏–Ω—É—Ç !</b>\n"
                f"<b>‚ùå –ï—Å–ª–∏ –Ω–µ –±—Ä–æ—Å–∏—Ç–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ !</b>\n"
                f"<blockquote>‚ö° –£–¥–∞—á–∏ –∏–≥—Ä–æ–∫–∞–º ! ‚ö°</blockquote>"
            )
            
            # –ó–ê–ü–£–°–ö–ê–ï–ú –¢–ê–ô–ú–ï–† –î–õ–Ø –ò–ì–†–´
            asyncio.create_task(game_timeout(lobby_id))
            
    else:
        await callback.answer("<b>‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è !</b>", show_alert=True)

async def game_timeout(lobby_id: str):
    """–¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
    await asyncio.sleep(GAME_TIMEOUT)
    
    from dependencies import get_bot, get_db
    bot = get_bot()
    db = get_db()
    
    lobby_data = db.get_lobby(lobby_id)
    if lobby_data and lobby_data["status"] == "playing":
        
        players = list(lobby_data["players"].keys())
        scores = {}
        losers = []
        
        for player in players:
            dice_values = lobby_data["players"][player]["dice"]
            if dice_values and len(dice_values) == 2:
                scores[player] = sum(dice_values)
            else:
                scores[player] = 0
                losers.append(player)
        
        # –ï—Å–ª–∏ –æ–±–∞ –Ω–µ –±—Ä–æ—Å–∏–ª–∏ - –æ–±–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏
        if len(losers) == 2:
            db.update_lobby_status(lobby_id, "timeout", None, scores)
            await bot.send_message(
                lobby_data["chat_id"],
                f"<b>‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ ! ‚è∞</b>\n\n"
                f"<b>‚ùå –û–±–∞ –∏–≥—Ä–æ–∫–∞ –Ω–µ –±—Ä–æ—Å–∏–ª–∏ –∫—É–±–∏–∫–∏ !</b>\n"
                f"<b>üë§ @{players[0]} –∏ üë§ @{players[1]} - –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É !</b>\n"
                f"<blockquote>üòû –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥—å—Ç–µ –±—ã—Å—Ç—Ä–µ–µ ! üòû</blockquote>"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            try:
                await bot.send_message(
                    lobby_data["admin_id"],
                    f"<b>‚è∞ –õ–û–ë–ë–ò {lobby_id} - –¢–ê–ô–ú–ê–£–¢ ‚è∞</b>\n\n"
                    f"<b>üë• –ò–≥—Ä–æ–∫–∏: @{', @'.join(players)}</b>\n"
                    f"<b>‚ùå –û–±–∞ –Ω–µ –±—Ä–æ—Å–∏–ª–∏ –∫—É–±–∏–∫–∏</b>\n"
                    f"<blockquote>üïê –í—Ä–µ–º—è –Ω–∞ –±—Ä–æ—Å–∫–∏ –∏—Å—Ç–µ–∫–ª–æ</blockquote>"
                )
            except:
                pass
                
        # –ï—Å–ª–∏ –æ–¥–∏–Ω –Ω–µ –±—Ä–æ—Å–∏–ª - –æ–Ω –ø—Ä–æ–∏–≥—Ä–∞–ª
        elif len(losers) == 1:
            winner = [p for p in players if p not in losers][0]
            db.update_lobby_status(lobby_id, "finished", winner, scores)
            await bot.send_message(
                lobby_data["chat_id"],
                f"<b>‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ ! ‚è∞</b>\n\n"
                f"<b>‚ùå @{losers[0]} –Ω–µ –±—Ä–æ—Å–∏–ª –∫—É–±–∏–∫–∏ !</b>\n"
                f"<b>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner} –ø–æ —Ç–∞–π–º–∞—É—Ç—É !</b>\n"
                f"<blockquote>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π ! üéâ</blockquote>"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            try:
                await bot.send_message(
                    lobby_data["admin_id"],
                    f"<b>üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –õ–û–ë–ë–ò {lobby_id} üèÜ</b>\n\n"
                    f"<b>üë• –ò–≥—Ä–æ–∫–∏: @{', @'.join(players)}</b>\n"
                    f"<b>üéØ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner}</b>\n"
                    f"<b>üìä –ü—Ä–∏—á–∏–Ω–∞: –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –±—Ä–æ—Å–∏–ª –∫—É–±–∏–∫–∏</b>\n"
                    f"<blockquote>‚ö° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ ‚ö°</blockquote>"
                )
            except:
                pass
                
        else:
            # –û–±–∞ –±—Ä–æ—Å–∏–ª–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await process_game_result(lobby_id, lobby_data["chat_id"], force=True)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.move_to_history(lobby_id)

@router.message(F.dice)
async def handle_dice_throw(message: Message):
    username = message.from_user.username.lower() if message.from_user.username else None
    if not username:
        return
        
    lobbies = db.get_all_lobbies()
    for lobby_id, lobby_data in lobbies.items():
        lobby_usernames = [name.lower() for name in lobby_data["players"].keys()]
        
        if (lobby_data["chat_id"] == message.chat.id and 
            lobby_data["status"] == "playing" and 
            username in lobby_usernames):
            
            original_username = None
            for player_username in lobby_data["players"].keys():
                if player_username.lower() == username:
                    original_username = player_username
                    break
            
            if original_username not in user_dice_throws:
                user_dice_throws[original_username] = []
            
            user_dice_throws[original_username].append(message.dice.value)
            
            if len(user_dice_throws[original_username]) == 2:
                db.set_player_dice(lobby_id, original_username, user_dice_throws[original_username].copy())
                del user_dice_throws[original_username]
                
                await message.answer(f"<b>‚úÖ @{original_username} –±—Ä–æ—Å–∏–ª –∫—É–±–∏–∫–∏ !</b>")
                
                lobby_data = db.get_lobby(lobby_id)
                all_thrown = all(player["dice"] is not None for player in lobby_data["players"].values())
                
                if all_thrown:
                    await process_game_result(lobby_id, message.chat.id)
            break

async def process_game_result(lobby_id: str, chat_id: int, force: bool = False):
    bot = get_bot()
    db = get_db()
    
    lobby_data = db.get_lobby(lobby_id)
    if not lobby_data:
        return
        
    players = list(lobby_data["players"].keys())
    
    scores = {}
    for player in players:
        dice_values = lobby_data["players"][player]["dice"]
        if dice_values and len(dice_values) == 2:
            scores[player] = sum(dice_values)
        else:
            scores[player] = 0
    
    player1, player2 = players
    score1 = scores[player1]
    score2 = scores[player2]
    
    if score1 > score2:
        winner = player1
        db.update_lobby_status(lobby_id, "finished", winner, scores)
        result_text = format_game_result(db.get_lobby(lobby_id))
        await bot.send_message(chat_id, result_text, reply_markup=get_game_result_keyboard())
        
        try:
            await bot.send_message(
                lobby_data["admin_id"],
                f"<b>üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –õ–û–ë–ë–ò {lobby_id} üèÜ</b>\n\n"
                f"<b>üë• –ò–≥—Ä–æ–∫–∏: @{player1} vs @{player2}</b>\n"
                f"<b>üìä –°—á–µ—Ç: {score1} - {score2}</b>\n"
                f"<b>üéØ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner}</b>\n"
                f"<blockquote>‚ö° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ ‚ö°</blockquote>"
            )
        except:
            pass
            
    elif score2 > score1:
        winner = player2
        db.update_lobby_status(lobby_id, "finished", winner, scores)
        result_text = format_game_result(db.get_lobby(lobby_id))
        await bot.send_message(chat_id, result_text, reply_markup=get_game_result_keyboard())
        
        try:
            await bot.send_message(
                lobby_data["admin_id"],
                f"<b>üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ –õ–û–ë–ë–ò {lobby_id} üèÜ</b>\n\n"
                f"<b>üë• –ò–≥—Ä–æ–∫–∏: @{player1} vs @{player2}</b>\n"
                f"<b>üìä –°—á–µ—Ç: {score1} - {score2}</b>\n"
                f"<b>üéØ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner}</b>\n"
                f"<blockquote>‚ö° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ ‚ö°</blockquote>"
            )
        except:
            pass
            
    else:
        # –ù–ò–ß–¨–Ø - –ü–ï–†–ï–ö–ò–î–´–í–ê–ï–ú, –ê –ù–ï –ó–ê–í–ï–†–®–ê–ï–ú
        if not force:
            await handle_draw(lobby_id, chat_id, players)
            return  # –ù–ï –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é!
        else:
            db.update_lobby_status(lobby_id, "draw", None, scores)
            result_text = format_game_result(db.get_lobby(lobby_id))
            await bot.send_message(chat_id, result_text, reply_markup=get_game_result_keyboard())
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ –Ω–∏—á—å—è –¥–ª—è –ø–µ—Ä–µ–±—Ä–æ—Å–∞)
    db.move_to_history(lobby_id)

async def handle_draw(lobby_id: str, chat_id: int, players: list):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏—á—å–∏ - –ø–µ—Ä–µ–±—Ä–æ—Å –∫—É–±–∏–∫–æ–≤"""
    bot = get_bot()
    db = get_db()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—Ä–æ—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–Ω–∏—è
    for player in players:
        db.set_player_dice(lobby_id, player, None)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for player in players:
        if player in user_dice_throws:
            del user_dice_throws[player]
    
    # –ù–ï –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é! –û—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–±–±–∏ –∞–∫—Ç–∏–≤–Ω—ã–º
    db.update_lobby_status(lobby_id, "playing")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å playing
    
    await bot.send_message(
        chat_id,
        f"<b>üéØ –ù–ò–ß–¨–Ø ! üéØ</b>\n\n"
        f"<b>üë§ @{players[0]} –∏ üë§ @{players[1]}</b>\n\n"
        f"<b>üîÑ –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–π—Ç–µ –∫—É–±–∏–∫–∏ –∑–∞–Ω–æ–≤–æ !</b>\n"
        f"<b>üé≤ –ö–∏–¥–∞–π—Ç–µ –ø–æ 2 –∫—É–±–∏–∫–∞ —Å–Ω–æ–≤–∞ !</b>\n"
        f"<b>‚è∞ –í—Ä–µ–º—è: 5 –º–∏–Ω—É—Ç —Å–Ω–æ–≤–∞ !</b>\n"
        f"<blockquote>‚ö° –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ! ‚ö°</blockquote>"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–Ω–æ–≤–æ
    asyncio.create_task(game_timeout(lobby_id))

async def create_lobby_from_tournament(tournament_id: str, participants: list) -> list:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞"""
    from dependencies import get_bot, get_db
    bot = get_bot()
    db = get_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞
    tournament_data = None
    all_tournaments = db.get_all_tournaments()
    for tid, data in all_tournaments.items():
        if tid == tournament_id:
            tournament_data = data
            break
    
    if not tournament_data:
        return []
    
    lobbies = []
    # –†–∞–∑–±–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø–∞—Ä—ã
    for i in range(0, len(participants), 2):
        if i + 1 < len(participants):
            username1 = participants[i]
            username2 = participants[i + 1]
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–±–±–∏
            lobby_id = db.create_lobby(
                tournament_data["chat_id"],
                tournament_data["admin_id"],
                username1,
                username2
            )
            
            lobbies.append(lobby_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏ –≤ –ß–ê–¢
            await bot.send_message(
                tournament_data["chat_id"],
                f"<b>üéÆ –¢–£–†–ù–ò–†–ù–û–ï –õ–û–ë–ë–ò –°–û–ó–î–ê–ù–û ! üéÆ</b>\n\n"
                f"<code>üÜî ID: {lobby_id}</code>\n\n"
                f"<b>üë§ @{username1} vs üë§ @{username2}</b>\n\n"
                f"<b>üé≤ –ò–≥—Ä–∞: –ö—É–±—ã PvP</b>\n\n"
                f"<b>‚è∞ –í—Ä–µ–º—è –Ω–∞ –±—Ä–æ—Å–∫–∏: 5 –º–∏–Ω—É—Ç !</b>\n"
                f"<b>‚ùå –ï—Å–ª–∏ –Ω–µ –±—Ä–æ—Å–∏—Ç–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ !</b>\n\n"
                f"<blockquote>‚ö° –£–¥–∞—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ ! ‚ö°</blockquote>",
                reply_markup=get_connect_keyboard(lobby_id)
            )
            
            # –ó–ê–ü–£–°–ö–ê–ï–ú –¢–ê–ô–ú–ï–† –î–õ–Ø –õ–û–ë–ë–ò - –í–ê–ñ–ù–û!
            asyncio.create_task(game_timeout(lobby_id))
    
    return lobbies

@router.message(Command("cancel"))
async def cancel_game(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
        
    global user_dice_throws
    user_dice_throws = {}
    await message.answer("<b>‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã !</b>")