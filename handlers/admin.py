import asyncio
import time
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_IDS
from dependencies import get_db
from keyboards import get_admin_keyboard, get_lobby_list_keyboard, get_tournament_list_keyboard
from services.tournament_service import create_tournament_command

router = Router()
db = get_db()

last_edit_time = {}
EDIT_DELAY = 2.0

class TournamentCreation(StatesGroup):
    waiting_for_players = State()
    waiting_for_time = State()

async def safe_edit_message(chat_id, message_id, text, reply_markup=None):
    """Safe message editing with rate limiting"""
    current_time = time.time()
    key = f"{chat_id}_{message_id}"
    
    if key in last_edit_time:
        time_since_last = current_time - last_edit_time[key]
        if time_since_last < EDIT_DELAY:
            await asyncio.sleep(EDIT_DELAY - time_since_last)
    
    from dependencies import get_bot
    bot = get_bot()
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup
        )
        last_edit_time[key] = time.time()
        return True
    except Exception as e:
        print(f"Error editing message: {e}")
        return False

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<b>‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>")
        return
        
    await message.answer(
        "<b>üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üëë</b>\n\n"
        "<b>‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ –∏ –ª–æ–±–±–∏</b>\n\n"
        "<blockquote>üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ!</blockquote>",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data == "admin_active_lobbies")
async def show_active_lobbies(callback: CallbackQuery):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        lobbies = db.get_all_lobbies()
        
        if not lobbies:
            await callback.message.edit_text("<b>üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏!</b>")
            return
            
        await safe_edit_message(
            callback.message.chat.id,
            callback.message.message_id,
            "<b>üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–±–±–∏ üéØ</b>",
            reply_markup=get_lobby_list_keyboard(lobbies)
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

@router.callback_query(F.data == "admin_tournaments")
async def show_active_tournaments(callback: CallbackQuery):
    try:
        tournaments = db.get_all_tournaments()
        
        if not tournaments:
            await callback.message.edit_text("<b>üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤!</b>")
            return
            
        await safe_edit_message(
            callback.message.chat.id,
            callback.message.message_id,
            "<b>üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã üéØ</b>",
            reply_markup=get_tournament_list_keyboard(tournaments)
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

@router.callback_query(F.data == "admin_create_tournament")
async def create_tournament_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TournamentCreation.waiting_for_players)
    
    await safe_edit_message(
        callback.message.chat.id,
        callback.message.message_id,
        "<b>üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ üéØ</b>\n\n"
        "<b>üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
        "<code>‚Ä¢ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º</code>\n"
        "<code>‚Ä¢ –ú–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞</code>\n\n"
        "<blockquote>‚ö° –ü—Ä–∏–º–µ—Ä: 64</blockquote>"
    )

@router.message(StateFilter(TournamentCreation.waiting_for_players))
async def process_players_count(message: Message, state: FSMContext):
    try:
        players_count = int(message.text)
        
        if players_count < 2:
            await message.answer("<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2!</b>\n\n<b>üëâ –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:</b>")
            return
            
        if players_count % 2 != 0:
            await message.answer("<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º!</b>\n\n<b>üëâ –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:</b>")
            return
            
        await state.update_data(players_count=players_count)
        await state.set_state(TournamentCreation.waiting_for_time)
        
        await message.answer(
            "<b>‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
            "<b>üëâ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö:</b>\n\n"
            "<code>‚Ä¢ –û—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤</code>\n\n"
            "<blockquote>‚ö° –ü—Ä–∏–º–µ—Ä: 8</blockquote>"
        )
        
    except ValueError:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>\n\n<b>üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>")

@router.message(StateFilter(TournamentCreation.waiting_for_time))
async def process_registration_time(message: Message, state: FSMContext):
    try:
        hours = int(message.text)
        
        if hours < 1 or hours > 24:
            await message.answer("<b>‚ùå –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤!</b>\n\n<b>üëâ –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:</b>")
            return
            
        data = await state.get_data()
        players_count = data['players_count']
        
        tournament_id = await create_tournament_command(
            message.from_user.id,
            players_count,
            hours
        )
        
        await message.answer(
            f"<b>‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"<code>üÜî ID: {tournament_id}</code>\n"
            f"<b>üë• –ò–≥—Ä–æ–∫–æ–≤: {players_count}</b>\n"
            f"<b>‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {hours} —á–∞—Å–æ–≤</b>\n\n"
            f"<blockquote>üéØ –¢—É—Ä–Ω–∏—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!</blockquote>"
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("<b>‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>\n\n<b>üëâ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>")
    except Exception as e:
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:</b>\n\n<code>{str(e)[:100]}...</code>")
        await state.clear()

@router.callback_query(F.data.startswith("lobby_info_"))
async def show_lobby_info(callback: CallbackQuery):
    try:
        lobby_id = callback.data.split("_")[2]
        lobby_data = db.get_lobby(lobby_id)
        
        if not lobby_data:
            await callback.answer("‚ùå –õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
            
        info_text = f"<b>üéÆ –õ–æ–±–±–∏ {lobby_id}</b>\n\n"
        info_text += f"<code>–°—Ç–∞—Ç—É—Å: {lobby_data['status']}</code>\n"
        info_text += f"<code>–°–æ–∑–¥–∞–Ω–æ: {lobby_data['created_at'][:19].replace('T', ' ')}</code>\n\n"
        
        for username, player_data in lobby_data["players"].items():
            status = "‚úÖ" if player_data["connected"] else "‚ùå"
            dice_status = "üé≤" if player_data["dice"] else "‚è≥"
            info_text += f"{status} {dice_status} @{username}\n"
        
        await safe_edit_message(
            callback.message.chat.id,
            callback.message.message_id,
            info_text
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

@router.callback_query(F.data.startswith("tournament_info_"))
async def show_tournament_info(callback: CallbackQuery):
    try:
        tournament_id = callback.data.split("_")[2]
        tournament_data = db.get_tournament(tournament_id)
        
        if not tournament_data:
            await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
            
        info_text = f"<b>üéØ –¢—É—Ä–Ω–∏—Ä {tournament_id}</b>\n\n"
        info_text += f"<code>–°—Ç–∞—Ç—É—Å: {tournament_data['status']}</code>\n"
        info_text += f"<code>–ò–≥—Ä–æ–∫–æ–≤: {len(tournament_data['participants'])}/{tournament_data['max_players']}</code>\n"
        info_text += f"<code>–í—Ä–µ–º—è: {tournament_data['hours']} —á–∞—Å–æ–≤</code>\n"
        info_text += f"<code>–°–æ–∑–¥–∞–Ω: {tournament_data['created_at'][:19].replace('T', ' ')}</code>\n\n"
        
        if tournament_data["participants"]:
            info_text += f"<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(tournament_data['participants'])}):</b>\n"
            for i, participant in enumerate(tournament_data["participants"][:10], 1):
                info_text += f"{i}. @{participant}\n"
            if len(tournament_data["participants"]) > 10:
                info_text += f"... –∏ –µ—â–µ {len(tournament_data['participants']) - 10}\n"
        
        await safe_edit_message(
            callback.message.chat.id,
            callback.message.message_id,
            info_text
        )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

@router.callback_query(F.data == "admin_back")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_edit_message(
        callback.message.chat.id,
        callback.message.message_id,
        "<b>üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üëë</b>\n\n"
        "<b>‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ –∏ –ª–æ–±–±–∏</b>\n\n"
        "<blockquote>üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ!</blockquote>",
        reply_markup=get_admin_keyboard()
    )

@router.message(Command("stop"))
async def stop_lobby(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<b>‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>")
        return
        
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stop <lobby_id></b>")
            return
            
        lobby_id = parts[1]
        lobby_data = db.get_lobby(lobby_id)
        
        if not lobby_data:
            await message.answer("<b>‚ùå –õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>")
            return
            
        db.move_to_history(lobby_id)
        await message.answer(f"<b>‚úÖ –õ–æ–±–±–∏ {lobby_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é!</b>")
        
    except Exception as e:
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞: {e}</b>")

@router.message(Command("cleanup"))
async def cleanup_database(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<b>‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>")
        return
        
    try:
        db.clear_old_data(7)
        await message.answer("<b>‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)!</b>")
    except Exception as e:
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}</b>")

@router.message(Command("stats"))
async def show_stats(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<b>‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>")
        return
        
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
        active_lobbies = len(db.get_all_lobbies())
        tournaments = db.get_all_tournaments()
        active_tournaments = len(tournaments)
        
        # –°—á–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ª–æ–±–±–∏
        data = db._read_data()
        history_lobbies = len(data.get("history", {}))
        
        stats_text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        stats_text += f"<code>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏: {active_lobbies}</code>\n"
        stats_text += f"<code>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä: {history_lobbies}</code>\n"
        stats_text += f"<code>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {active_tournaments}</code>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º
        if tournaments:
            registered_players = sum(len(t['participants']) for t in tournaments.values())
            stats_text += f"<code>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {registered_players}</code>\n"
        
        stats_text += "<blockquote>‚ö° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ</blockquote>"
        
        await message.answer(stats_text)
        
    except Exception as e:
        await message.answer(f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}</b>")