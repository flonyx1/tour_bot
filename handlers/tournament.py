import asyncio
import logging
import time
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from config import ADMIN_IDS, ALLOWED_CHANNEL_ID, ALLOWED_CHAT_ID
from dependencies import get_bot, get_db
from keyboards import get_tournament_join_keyboard, get_connect_keyboard
from handlers.game import create_lobby_from_tournament, game_timeout

logger = logging.getLogger(__name__)

router = Router()
db = get_db()

# –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
last_edit_time = {}

async def create_tournament_command(admin_id: int, max_players: int, hours: int) -> str:
    try:
        tournament_id = db.create_tournament(
            ALLOWED_CHAT_ID,
            admin_id,
            max_players,
            hours
        )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç—É—Ä–Ω–∏—Ä {tournament_id} –¥–ª—è {max_players} –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ {hours} —á–∞—Å–æ–≤")
        
        bot = get_bot()
        
        try:
            tournament_message = await bot.send_message(
                ALLOWED_CHANNEL_ID,
                f"<b>üéØ –û–ë–™–Ø–í–õ–ï–ù –ù–û–í–´–ô –¢–£–†–ù–ò–† üéØ</b>\n\n"
                f"<code>üÜî ID: {tournament_id}</code>\n"
                f"<b>üë• –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {max_players}</b>\n"
                f"<b>‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {hours} —á–∞—Å–æ–≤</b>\n"
                f"<b>üéÆ –ò–≥—Ä—ã –ø—Ä–æ–π–¥—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ</b>\n\n"
                f"<b>‚ö° –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ !</b>\n"
                f"<blockquote>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–ª–∞–≤—É –∏ —É–≤–∞–∂–µ–Ω–∏–µ ! üèÜ</blockquote>",
                reply_markup=get_tournament_join_keyboard(tournament_id)
            )
            
            db.update_tournament_message_id(tournament_id, tournament_message.message_id)
            logger.info(f"–¢—É—Ä–Ω–∏—Ä {tournament_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
            
        tournament_timeout = hours * 3600
        asyncio.create_task(tournament_timeout_func(tournament_id, tournament_timeout))
        
        return tournament_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        raise e

async def tournament_timeout_func(tournament_id: str, timeout: int):
    """–¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
    await asyncio.sleep(timeout)
    
    tournament_data = db.get_tournament(tournament_id)
    if tournament_data and tournament_data["status"] == "registration":
        bot = get_bot()
        
        participants = tournament_data["participants"]
        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
        
        if len(participants) >= 2:
            lobbies = await create_lobby_from_tournament(tournament_id, participants)
            db.update_tournament_status(tournament_id, "started", lobbies)
            
            await bot.send_message(
                ALLOWED_CHANNEL_ID,
                f"<b>üéØ –¢–£–†–ù–ò–† –ù–ê–ß–ê–õ–°–Ø üéØ</b>\n\n"
                f"<code>üÜî ID: {tournament_id}</code>\n"
                f"<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}</b>\n"
                f"<b>üéÆ –°–æ–∑–¥–∞–Ω–æ –∏–≥—Ä: {len(lobbies)}</b>\n"
                f"<b>‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª–∏–ª–∞—Å—å: {tournament_data['hours']} —á.</b>\n"
                f"<b>üìç –ò–≥—Ä—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ</b>\n\n"
                f"<b>‚ö° –£–¥–∞—á–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º !</b>\n"
                f"<blockquote>üèÜ –°—Ä–∞–∂–∞–π—Ç–µ—Å—å –∑–∞ –ø–æ–±–µ–¥—É ! üèÜ</blockquote>"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
            asyncio.create_task(check_tournament_completion(tournament_id))
            
        else:
            db.update_tournament_status(tournament_id, "cancelled")
            await bot.send_message(
                ALLOWED_CHANNEL_ID,
                f"<b>‚ùå –¢–£–†–ù–ò–† –û–¢–ú–ï–ù–ï–ù ‚ùå</b>\n\n"
                f"<code>üÜî ID: {tournament_id}</code>\n"
                f"<b>üë• –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}/{tournament_data['max_players']}</b>\n"
                f"<b>‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª–∏–ª–∞—Å—å: {tournament_data['hours']} —á.</b>\n"
                f"<blockquote>üòû –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ! üòû</blockquote>"
            )

async def check_tournament_completion(tournament_id: str):
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ª–æ–±–±–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    from dependencies import get_bot, get_db
    bot = get_bot()
    db = get_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    while True:
        await asyncio.sleep(30)
        
        tournament_data = db.get_tournament(tournament_id)
        if not tournament_data or tournament_data["status"] != "started":
            return
            
        all_finished = True
        winners = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–æ–±–±–∏ —Ç—É—Ä–Ω–∏—Ä–∞
        for lobby_id in tournament_data["lobbies"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏
            active_lobbies = db.get_all_lobbies()
            if lobby_id in active_lobbies:
                all_finished = False
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã)
            history_data = db._read_data().get("history", {})
            lobby_data = history_data.get(lobby_id)
            if lobby_data and lobby_data.get("winner"):
                winners.append(f"@{lobby_data['winner']}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ª–æ–±–±–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        if all_finished:
            db.update_tournament_status(tournament_id, "completed")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            winners_text = ", ".join(winners) if winners else "–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await bot.send_message(
                ALLOWED_CHANNEL_ID,
                f"<b>üèÜ –¢–£–†–ù–ò–† –ó–ê–í–ï–†–®–ï–ù üèÜ</b>\n\n"
                f"<code>üéØ ID: {tournament_id}</code>\n"
                f"<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data['participants'])}</b>\n"
                f"<b>üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {len(tournament_data['lobbies'])}</b>\n\n"
                f"<b>üèÖ –ü–û–ë–ï–î–ò–¢–ï–õ–ò –¢–£–†–ù–ò–†–ê:</b>\n"
                f"<b>{winners_text}</b>\n\n"
                f"<b>‚ö° –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π !</b>\n"
                f"<blockquote>üéÆ –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ ! üéÆ</blockquote>"
            )
            
            return

@router.message(Command("tournament"))
async def create_tournament_via_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("<b>‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã !</b>")
        return
        
    await message.answer("<b>üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ !</b>\n\n<code>–ù–∞–ø–∏—à–∏—Ç–µ /admin</code>")

@router.callback_query(F.data.startswith("join_tournament_"))
async def join_tournament(callback: CallbackQuery):
    try:
        tournament_id = callback.data.split("_")[2]
        username = callback.from_user.username
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è @{username} –∫ —Ç—É—Ä–Ω–∏—Ä—É {tournament_id}")
        
        if not username:
            await callback.answer("<b>‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å username !</b>", show_alert=True)
            return
            
        tournament_data = db.get_tournament(tournament_id)
        
        if not tournament_data:
            await callback.answer("<b>‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω !</b>", show_alert=True)
            return
            
        if tournament_data["status"] != "registration":
            await callback.answer("<b>‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –∑–∞–∫—Ä—ã—Ç–∞ !</b>", show_alert=True)
            return
            
        success = db.add_tournament_participant(tournament_id, username)
        
        if success:
            tournament_data = db.get_tournament(tournament_id)
            participants_count = len(tournament_data["participants"])
            max_players = tournament_data["max_players"]
            
            logger.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä {tournament_id}. –¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}")
            
            await callback.answer(f"‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ ! ({participants_count}/{max_players})", show_alert=True)
            
            # –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –¢–û–õ–¨–ö–û –ö–ê–ñ–î–´–ï 5 –£–ß–ê–°–¢–ù–ò–ö–û–í –ò–õ–ò –ü–†–ò –ó–ê–ü–û–õ–ù–ï–ù–ò–ò
            if participants_count % 5 == 0 or participants_count >= max_players:
                bot = get_bot()
                try:
                    await bot.edit_message_text(
                        chat_id=ALLOWED_CHANNEL_ID,
                        message_id=tournament_data["channel_message_id"],
                        text=f"<b>üéØ –û–ë–™–Ø–í–õ–ï–ù –ù–û–í–´–ô –¢–£–†–ù–ò–† üéØ</b>\n\n"
                             f"<code>üÜî ID: {tournament_id}</code>\n"
                             f"<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}/{max_players}</b>\n"
                             f"<b>‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {tournament_data['hours']} —á–∞—Å–æ–≤</b>\n"
                             f"<b>üéÆ –ò–≥—Ä—ã –ø—Ä–æ–π–¥—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ</b>\n\n"
                             f"<b>‚ö° –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ !</b>\n"
                             f"<blockquote>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–ª–∞–≤—É –∏ —É–≤–∞–∂–µ–Ω–∏–µ ! üèÜ</blockquote>",
                        reply_markup=get_tournament_join_keyboard(tournament_id)
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
            # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
            if participants_count >= max_players:
                logger.info(f"–¢—É—Ä–Ω–∏—Ä {tournament_id} –∑–∞–ø–æ–ª–Ω–µ–Ω! –ó–∞–ø—É—Å–∫–∞–µ–º...")
                db.update_tournament_status(tournament_id, "starting")
                await asyncio.sleep(2)
                
                tournament_data = db.get_tournament(tournament_id)
                lobbies = await create_lobby_from_tournament(tournament_id, tournament_data["participants"])
                db.update_tournament_status(tournament_id, "started", lobbies)
                
                bot = get_bot()
                await bot.send_message(
                    ALLOWED_CHANNEL_ID,
                    f"<b>üéØ –¢–£–†–ù–ò–† –ù–ê–ß–ê–õ–°–Ø üéØ</b>\n\n"
                    f"<code>üÜî ID: {tournament_id}</code>\n"
                    f"<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}</b>\n"
                    f"<b>üéÆ –õ–æ–±–±–∏: {len(lobbies)}</b>\n"
                    f"<b>üìç –ò–≥—Ä—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ</b>\n\n"
                    f"<b>‚ö° –£–¥–∞—á–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º !</b>\n"
                    f"<blockquote>üèÜ –°—Ä–∞–∂–∞–π—Ç–µ—Å—å –∑–∞ –ø–æ–±–µ–¥—É ! üèÜ</blockquote>"
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
                asyncio.create_task(check_tournament_completion(tournament_id))
                
        else:
            await callback.answer("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É !</b>", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ join_tournament: {e}")
        await callback.answer("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Ç—É—Ä–Ω–∏—Ä—É !</b>", show_alert=True)