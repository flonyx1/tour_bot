# services/tournament_service.py
import asyncio
import logging
import time
from dependencies import get_bot, get_db
from keyboards import get_connect_keyboard, get_tournament_join_keyboard
from config import ALLOWED_CHANNEL_ID, ALLOWED_CHAT_ID

logger = logging.getLogger(__name__)

async def create_tournament_command(admin_id: int, max_players: int, hours: int) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        db = get_db()
        tournament_id = db.create_tournament(
            ALLOWED_CHAT_ID,
            admin_id,
            max_players,
            hours
        )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ç—É—Ä–Ω–∏—Ä {tournament_id} –¥–ª—è {max_players} –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ {hours} —á–∞—Å–æ–≤")
        
        bot = get_bot()
        
        try:
            tournament_message = await bot.send_message(
                ALLOWED_CHANNEL_ID,
                f"<b>üéØ –û–ë–™–Ø–í–õ–ï–ù –ù–û–í–´–ô –¢–£–†–ù–ò–† üéØ</b>\n\n"
                f"<code>üÜî ID: {tournament_id}</code>\n"
                f"<b>üë• –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: {max_players}</b>\n"
                f"<b>‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {hours} —á–∞—Å–æ–≤</b>\n"
                f"<b>üéÆ –ò–≥—Ä—ã –ø—Ä–æ–π–¥—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ</b>\n\n"
                f"<b>‚ö° –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ !</b>\n"
                f"<blockquote>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–ª–∞–≤—É –∏ —É–≤–∞–∂–µ–Ω–∏–µ ! üèÜ</blockquote>",
                reply_markup=get_tournament_join_keyboard(tournament_id)
            )
            
            db.update_tournament_message_id(tournament_id, tournament_message.message_id)
            logger.info(f"–¢—É—Ä–Ω–∏—Ä {tournament_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
            raise e
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        tournament_timeout = hours * 3600
        asyncio.create_task(tournament_timeout_func(tournament_id, tournament_timeout))
        
        return tournament_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        raise e

async def tournament_timeout_func(tournament_id: str, timeout: int):
    """–¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
    await asyncio.sleep(timeout)
    
    db = get_db()
    tournament_data = db.get_tournament(tournament_id)
    if tournament_data and tournament_data["status"] == "registration":
        bot = get_bot()
        
        participants = tournament_data["participants"]
        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
        
        if len(participants) >= 2:
            lobbies = await create_tournament_lobbies(tournament_id, participants)
            db.update_tournament_status(tournament_id, "started", lobbies)
            
            await bot.send_message(
                ALLOWED_CHANNEL_ID,
                f"<b>üéØ –¢–£–†–ù–ò–† –ù–ê–ß–ê–õ–°–Ø üéØ</b>\n\n"
                f"<code>üÜî ID: {tournament_id}</code>\n"
                f"<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}</b>\n"
                f"<b>üéÆ –°–æ–∑–¥–∞–Ω–æ –∏–≥—Ä: {len(lobbies)}</b>\n"
                f"<b>‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª–∏–ª–∞—Å—å: {tournament_data['hours']} —á.</b>\n"
                f"<b>üìç –ò–≥—Ä—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ</b>\n\n"
                f"<b>‚ö° –£–¥–∞—á–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º !</b>\n"
                f"<blockquote>üèÜ –°—Ä–∞–∂–∞–π—Ç–µ—Å—å –∑–∞ –ø–æ–±–µ–¥—É ! üèÜ</blockquote>"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
            asyncio.create_task(check_tournament_completion(tournament_id))
            
        else:
            db.update_tournament_status(tournament_id, "cancelled")
            await bot.send_message(
                ALLOWED_CHANNEL_ID,
                f"<b>‚ùå –¢–£–†–ù–ò–† –û–¢–ú–ï–ù–ï–ù ‚ùå</b>\n\n"
                f"<code>üÜî ID: {tournament_id}</code>\n"
                f"<b>üë• –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}/{tournament_data['max_players']}</b>\n"
                f"<b>‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª–∏–ª–∞—Å—å: {tournament_data['hours']} —á.</b>\n"
                f"<blockquote>üòû –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ! üòû</blockquote>"
            )

async def create_tournament_lobbies(tournament_id: str, participants: list) -> list:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    bot = get_bot()
    db = get_db()
    
    tournament_data = db.get_tournament(tournament_id)
    if not tournament_data:
        return []
    
    lobbies = []
    # –†–∞–∑–±–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø–∞—Ä—ã
    for i in range(0, len(participants), 2):
        if i + 1 < len(participants):
            username1 = participants[i]
            username2 = participants[i + 1]
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–±–±–∏
            lobby_id = db.create_lobby(
                tournament_data["chat_id"],
                tournament_data["admin_id"],
                username1,
                username2
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tournament_id –¥–ª—è –ª–æ–±–±–∏
            db.set_lobby_tournament_id(lobby_id, tournament_id)
            
            lobbies.append(lobby_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏
            await bot.send_message(
                tournament_data["chat_id"],
                f"<b>üéÆ –¢–£–†–ù–ò–†–ù–û–ï –õ–û–ë–ë–ò –°–û–ó–î–ê–ù–û ! üéÆ</b>\n\n"
                f"<code>üÜî ID: {lobby_id}</code>\n\n"
                f"<b>üë§ @{username1} vs üë§ @{username2}</b>\n\n"
                f"<b>üé≤ –ò–≥—Ä–∞: –ö—É–±—ã PvP</b>\n\n"
                f"<b>‚è∞ –í—Ä–µ–º—è –Ω–∞ –±—Ä–æ—Å–∫–∏: 5 –º–∏–Ω—É—Ç !</b>\n"
                f"<b>‚ùå –ï—Å–ª–∏ –Ω–µ –±—Ä–æ—Å–∏—Ç–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ !</b>\n\n"
                f"<blockquote>‚ö° –£–¥–∞—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ ! ‚ö°</blockquote>",
                reply_markup=get_connect_keyboard(lobby_id)
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ª–æ–±–±–∏
            asyncio.create_task(game_timeout(lobby_id))
    
    return lobbies

async def game_timeout(lobby_id: str):
    """–¢–∞–π–º–∞—É—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    from handlers.game import game_timeout as base_game_timeout
    await base_game_timeout(lobby_id)

async def check_tournament_completion(tournament_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    bot = get_bot()
    db = get_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    while True:
        await asyncio.sleep(30)
        
        tournament_data = db.get_tournament(tournament_id)
        if not tournament_data or tournament_data["status"] != "started":
            return
            
        all_finished = True
        winners = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–æ–±–±–∏ —Ç—É—Ä–Ω–∏—Ä–∞
        for lobby_id in tournament_data["lobbies"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏
            active_lobbies = db.get_all_lobbies()
            if lobby_id in active_lobbies:
                all_finished = False
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã)
            history_data = db._read_data().get("history", {})
            lobby_data = history_data.get(lobby_id)
            if lobby_data and lobby_data.get("winner"):
                winners.append(f"@{lobby_data['winner']}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ª–æ–±–±–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        if all_finished:
            db.update_tournament_status(tournament_id, "completed")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            winners_text = ", ".join(winners) if winners else "–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await bot.send_message(
                ALLOWED_CHANNEL_ID,
                f"<b>üèÜ –¢–£–†–ù–ò–† –ó–ê–í–ï–†–®–ï–ù üèÜ</b>\n\n"
                f"<code>üéØ ID: {tournament_id}</code>\n"
                f"<b>üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data['participants'])}</b>\n"
                f"<b>üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {len(tournament_data['lobbies'])}</b>\n\n"
                f"<b>üèÖ –ü–û–ë–ï–î–ò–¢–ï–õ–ò –¢–£–†–ù–ò–†–ê:</b>\n"
                f"<b>{winners_text}</b>\n\n"
                f"<b>‚ö° –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π !</b>\n"
                f"<blockquote>üéÆ –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ ! üéÆ</blockquote>"
            )
            
            return